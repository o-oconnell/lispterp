Test cases:
1) 
(define m (define r 10))
r
m
()
)
(2)

'(2)

'(+ 1 2)


'(+ a b)


(if (> 10 20) (+ 1 1) (+ 3 3))
(if (< 10 20) (+ 1 1) (+ 3 3))

(if (and (> 10 20) T) (+ 1 1) (+ 3 3))

(if (or (> 10 20) T) (+ 1 1) (+ 3 3))
(if (and (> 20 10) NIL) (+ 1 1) (+ 3 3))
(if (and (= 10 10) (!= 10 10)) (+ 1 1) (+ 3 3))
(if (or (= 10 10) (!= 10 10)) (+ 1 1) (+ 3 3))

(define a 10)

(define b 20)

(if (> a b) (+ 1 1) (+ 3 3))

(if (< a b) (+ 1 1) (+ 3 3))

(if (and (> a b) T) (+ 1 1) (+ 3 3))

(if (or (> a b) T) (+ 1 1) (+ 3 3))

(if (and (= a a) (!= a a)) (+ 1 1) (+ 3 3))

(if (or (= a a) (!= a a)) (+ 1 1) (+ 3 3))

(if (not T) (+ 1 1) (+ 3 3))

(if (not NIL) (+ 1 1) (+ 3 3))


(define a 3)

(define b 2)

(if (< a b) (+ 1 1) (+ 3 3))

(if (> a b) (+ 1 1) (+ 3 3))


(define a 3)

(define b 2)

(define x 2)

(define y 2)

(if (< a b) (+ x y) (- x y))

(if (> a b) (+ x y) (- x y))



(sqrt 4)

(sqrt (+ 2 2))

(pow 2 3)

(pow (+ 1 1) (- 4 1))


(define x 2)

(sqrt x)

(define r 10)

(set! r 5)
r

(set! r (* 2 2))

r

(set! r (* r r))

r

(set! r 2)



(+ 2 3)

(- 3 2)

(* 2 3)

(/ 6 2)

(/ 6 0)



(+ (+ 2 3) 5)

(- (- 2 3) 5) 

(* (* 2 3) 5)



(define a 5)

(define b 10)

(+ a b)

(- b a)

(* b a)

(/ b a)


(define x 2)

(define y 4)

(define z 8)

(+ (+ x y) z)

(* (* x y) z)

(- (- x y) z)



(defun ADD (x y) (+ x y)) // define ADD function
(ADD 8 3)

(defun SUB (x y) (- x y)) // define SUB function
(SUB 3 2)

(defun MUL (x y) (* x y)) // define MUL function
(MUL 2 3)

(defun DIV (x y) (/ x y)) // define DIV function
(DIV 6 2)


(defun ADD2 (x y z) (+ (+ x y) z))
(ADD2 2 2 2)

(defun MUL2 (x y z) (* (* x y) z))
(MUL2 2 2 2)

(defun SUB2 (x y z) (- (- x y) z))
(SUB2 2 2 2)



(define DS '((Don Smith) 45 3000 (August 25 1980)))

(car (cdr (cdr (cdr DS))))

(define a '((1 2 3 (4 (5 (6 (7))) 8) 9 (10 11) 12 13 (14 15) 16 17 18)))

(car(car(cdr(car(cdr(car(cdr(car(cdr(cdr(cdr(car a))))))))))))

(cdr(car(cdr(cdr(cdr(cdr(cdr(car a))))))))


(cons 'to '(be or not))

(cons '(to be) '(or not))



(defun two_to_the_power (n) (if (= n 0) 1 (* 2 (two_to_the_power (- n 1)))))
(two_to_the_power 12)
